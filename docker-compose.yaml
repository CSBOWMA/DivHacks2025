version: '3.8'

services:
  db:
    build:
      context: ./postgres
    container_name: divhacks_postgres_db
    restart: always
    environment:
      POSTGRES_USER: divhack_user
      POSTGRES_PASSWORD: divhacks2025
      POSTGRES_DB: divhacks_db
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      #- db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U divhack_user -d divhacks_db -h db || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

    networks:
      - divhacks_network   # ✅ THIS IS REQUIRED


  nessie_ingest:
    build:
      context: ./fastapi
    container_name: divhacks_nessie_ingest
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=divhacks_db
      - DB_USER=divhack_user
      - DB_PASSWORD=divhacks2025
    networks:
      - divhacks_network
    command: >
      sh -c '
        echo "⏳ Waiting for Postgres ($$DB_HOST:$$DB_PORT)...";
        until pg_isready -h $$DB_HOST -p $$DB_PORT -U $$DB_USER > /dev/null 2>&1; do
          echo "   ↪ still waiting..."; sleep 2;
        done;
        echo "✅ Postgres is ready! Starting ingestion...";
        python3 -m app.database.nessie_ingest;
        echo "✅ Nessie ingestion complete.";
      '
    restart: "no"


  neo4j:
    build:
      context: ./neo4j
    container_name: divhacks_neo4j
    restart: always
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/divhacks2025
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - divhacks_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p divhacks2025 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s

  fastapi:
    build:
      context: ./fastapi
    container_name: divhacks_fastapi
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - divhacks_network
    environment:
      - PYTHONPATH=/app
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=divhacks_db
      - DB_USER=divhack_user
      - DB_PASSWORD=divhacks2025

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: divhacks_frontend
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    environment:
      NODE_ENV: production
    depends_on:
      - fastapi
    networks:
      - divhacks_network
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  db_data:
  neo4j_data:
  neo4j_logs:

networks:
  divhacks_network:
    driver: bridge